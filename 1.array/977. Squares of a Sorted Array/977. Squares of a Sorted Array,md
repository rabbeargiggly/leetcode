https://leetcode.cn/problems/squares-of-a-sorted-array/description/

# Problem Describtion

Given an integer array `nums` sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

 

**Example 1:**

```
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
```

**Example 2:**

```
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
```



# Bullet Points

**non-decreasing** order



# Code

```java
class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] results = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        int indexOfDecrease = nums.length - 1;
        while(left <= right){
            int squareOfLeft = nums[left] * nums[left];
            int squareOfRight = nums[right] * nums[right];
            if(squareOfLeft < squareOfRight){
                results[indexOfDecrease] = squareOfRight;
                right--;
            }else{
                results[indexOfDecrease] = squareOfLeft;
                left++;
            }
            indexOfDecrease--;
        }
        return results;
    }
}
```



```go
func sortedSquares(nums []int) []int {
    res := make([]int,len(nums))
    k := len(nums) - 1
    for i,j:=0,len(nums)-1;k>=0;k--{
        if (nums[i] * nums[i]) > (nums[j] * nums[j]) {
            res[k] = nums[i] * nums[i]
            i++
        }else{
            res[k] = nums[j] * nums[j]
            j--
        }
    }
return res
}
```

